}
"
model2 = jags.model(textConnection(modelstring2), data=data)
iterations = 100000
update(model2, n.iter=iterations)
output = coda.samples(model=model2, variable.names=c("newpsihat", "indicator","sigma0"), n.iter=iterations)
s = summary(output)
s
newpsihat = as.matrix(output)[,"newpsihat"]
temp = ifelse(newpsihat > 0.2, 1, 0)
mean(temp)
# 8
library(MASS)
m8 = lm(nox ~ poly(dis,3), data=Boston)
summary(m8)
round( sum(m8$resid^2) ,2)
1.93
# 9
round( predict(m8, newdata=data.frame(dis=6)) ,2)
0.44
# 10
summary(m8)
"Yes"
# 11
m11 = lm(nox ~ poly(dis,4), data=Boston)
summary(m11)
round( sum(m11$resid^2) ,2)
1.93
# 12
round( predict(m11, newdata=data.frame(dis=6)) ,2)
0.44
predict(m8, newdata=data.frame(dis=6))
predict(m11, newdata=data.frame(dis=6))
library(splines)
help(smooth.spline)
options(digits = 4)
set.seed(1234)
n = 30
err = 1
x = sort(runif(n))
y = sin(12*(x+0.2))/(x+0.2) + rnorm(n, 0, err);
plot(x, y, col="red");
fx = 1:50/50;
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5),fx),  lty=2, col='blue', lwd=1.5)
title('df=5')
par(mfrow=c(1,1))
n = 30
err = 1
x = sort(runif(n))
y = sin(12*(x+0.2))/(x+0.2) + rnorm(n, 0, err);
fx = 1:50/50;
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5),fx),  lty=2, col='blue', lwd=1.5)
library(splines)
help(smooth.spline)
options(digits = 4)
set.seed(1234)
par(mfrow=c(1,2))
n = 30
err = 1
x = sort(runif(n))
y = sin(12*(x+0.2))/(x+0.2) + rnorm(n, 0, err);
plot(x, y, col="red");
fx = 1:50/50;
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5),fx),  lty=2, col='blue', lwd=1.5)
title('df=5')
x
fx
fx = -50:10/50;
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5),fx),  lty=2, col='blue', lwd=1.5)
title('df=5')
x
library(splines)
help(smooth.spline)
options(digits = 4)
set.seed(1234)
par(mfrow=c(1,2))
n = 30
err = 1
x = sort(runif(n))
y = sin(12*(x+0.2))/(x+0.2) + rnorm(n, 0, err);
plot(x, y, col="red");
fx = -50:100/50;
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x, y, col="red", xlim=c(-50,100));
plot(x, y, col="red", xlim=c(-50/50,100/50));
fx = -50:100/50;
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x,y, xlab='x', ylab='y');
plot(x,y, xlab='x', ylab='y', xlim=c(-50/50,100/50));
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5),fx),  lty=2, col='blue', lwd=1.5)
plot(x, y, col="red", xlim=c(-50/50,100/50), ylim=c(-50,50));
fx = -50:100/50;
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x,y, xlab='x', ylab='y', xlim=c(-50/50,100/50));
lines(fx, fy, col=8, lwd=1.5);
plot(x,y, xlab='x', ylab='y', xlim=c(-50/50,100/50), ylim=c(-50,50));
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5),fx),  lty=2, col='blue', lwd=1.5)
plot(x,y, xlab='x', ylab='y', xlim=c(-10,10), ylim=c(-50,50));
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5),fx),  lty=2, col='blue', lwd=1.5)
fx = -10:10
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x,y, xlab='x', ylab='y', xlim=c(-10,10), ylim=c(-50,50));
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5),fx),  lty=2, col='blue', lwd=1.5)
plot(x,y, xlab='x', ylab='y', xlim=c(-10,10), ylim=c(-50,50));
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 0),fx),  lty=2, col='blue', lwd=1.5)
lines(predict(smooth.spline(x, y, df=5, lambda = 1),fx),  lty=2, col='blue', lwd=1.5)
lines(predict(smooth.spline(x, y, df=5, lambda = 0.01),fx),  lty=2, col='blue', lwd=1.5)
fx = -50:50/50
fx = 1:50/50
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x,y, xlab='x', ylab='y', xlim=c(-10,10), ylim=c(-50,50));
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 0.01),fx),  lty=2, col='blue', lwd=1.5)
fx = 1:50/50
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 0.01),fx),  lty=2, col='blue', lwd=1.5)
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 0.0000001),fx),  lty=2, col='blue', lwd=1.5)
lines(predict(smooth.spline(x, y, df=5, lambda = 100),fx),  lty=2, col='blue', lwd=1.5)
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 1e9),fx),  lty=2, col='blue', lwd=1.5)
library(splines)
help(smooth.spline)
options(digits = 4)
set.seed(1234)
par(mfrow=c(1,2))
n = 30
err = 1
x = sort(runif(n))
y = sin(12*(x+0.2))/(x+0.2) + rnorm(n, 0, err);
plot(x, y, col="red");
fx = 1:50/50
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 1e9),fx),  lty=2, col='blue', lwd=1.5)
title('df=5')
# 15.a
library(splines)
help(smooth.spline)
options(digits = 4)
set.seed(1234)
par(mfrow=c(1,2))
n = 30
err = 1
x = sort(runif(n))
y = sin(12*(x+0.2))/(x+0.2) + rnorm(n, 0, err);
plot(x, y, col="red");
fx = 1:50/50
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 1e-9),fx),  lty=2, col='blue', lwd=1.5)
title('df=5')
# 15.a
library(splines)
help(smooth.spline)
options(digits = 4)
set.seed(1234)
par(mfrow=c(1,2))
n = 30
err = 1
x = sort(runif(n))
y = sin(12*(x+0.2))/(x+0.2) + rnorm(n, 0, err);
plot(x, y, col="red");
fx = 1:50/50
fy = sin(12*(fx+0.2))/(fx+0.2)
lines(fx, fy, col=8, lwd=2)
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 1e9),fx),  lty=2, col='blue', lwd=1.5)
title('df=5')
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 1e-9),fx),  lty=2, col='blue', lwd=1.5)
title('df=5')
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 1e-19),fx),  lty=2, col='blue', lwd=1.5)
title('df=5')
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 1e-49),fx),  lty=2, col='blue', lwd=1.5)
title('df=5')
plot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 1e-29),fx),  lty=2, col='blue', lwd=1.5)
title('df=5')
lot(x,y, xlab='x', ylab='y');
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 1e-20),fx),  lty=2, col='blue', lwd=1.5)
title('df=5')
plot(x,y, xlab='x', ylab='y', xlim=c(-0.5,1.5));
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 1e-20),fx),  lty=2, col='blue', lwd=1.5)
plot(x,y, xlab='x', ylab='y', xlim=c(0,0.5));
lines(fx, fy, col=8, lwd=1.5);
lines(predict(smooth.spline(x, y, df=5, lambda = 1e-20),fx),  lty=2, col='blue', lwd=1.5)
title('df=5')
# 14
summary(lm(nox ~ bs(dis, df=3), data=Boston)) # df=5
# 14
summary(lm(nox ~ bs(dis, df=3), data=Boston)) # df=5
summary(lm(nox ~ bs(dis, knots=quantile(dis, prob=c(0.25,0.5,0.75))), data=Boston))
summary(lm(nox ~ bs(dis, df= 5, intercept=TRUE), data=Boston))
summary(lm(nox ~ bs(dis, knots=quantile(dis, prob=c(0.25,0.5,0.75))), data=Boston))
summary(lm(nox ~ bs(dis, knots=median(dis)), data=Boston))
summary(lm(nox ~ poly(dis, 3), data=Boston))
summary(lm(nox ~ bs(dis, df= 4, intercept=TRUE), data=Boston))
setwd("~/Documents/UIUC/3_STAT578_Advanced_Bayesian_Modelling/assign2")
#1
round(1-(0.97*0.5 + 0.91*0.5), 3)
round(0.93/0.99, 3)
#4
0.500 /(1-0.5)
#7
alpha=44; beta=8
sqrt( alpha*beta / (alpha+beta)^2 /(alpha+beta+1) )
#8
(alpha-1) / (alpha+beta-2)
alpha + (54 -1)
beta + (15 -1)
beta + (12 -1)
#10
alpha10 = alpha + (54 -1)
beta10 = beta + (12 -1)
alpha10*beta10 / (alpha10+beta10)^2 /(alpha10+beta10+1)
#11
alpha11 = alpha + (50 -1)
beta11 = beta + (12 -1)
alpha11/ (alpha11+beta11)
#12 (might change for each test)
alpha12 = alpha + (54 -1)
beta12 = beta + (12 -1)
round((alpha12 / (alpha12 + beta12))^2, 3)
#13
sqrt( 54*12 / (54+12)^2 /(54+12+1) )
#14
alpha14 = alpha + (50 -1)
beta14 = beta + (12 -1)
alpha14
beta14
#11
alpha11 = alpha + (50 -1)
beta11 = beta + (12 -1)
alpha11/ (alpha11+beta11)
alpha + (54 -1)
beta + (12 -1)
#10
alpha10 = alpha + (54 -1)
beta10 = beta + (12 -1)
alpha10*beta10 / (alpha10+beta10)^2 /(alpha10+beta10+1)
#11
alpha11 = alpha + (50 -1)
beta11 = beta + (12 -1)
alpha11/ (alpha11+beta11)
#11
alpha11 = alpha + (54 -1)
beta11 = beta + (12 -1)
alpha11/ (alpha11+beta11)
round(0.93/0.99, 3)
#1
round(1-(0.93*0.5 + 0.99*0.5), 3)
round(0.97*0.5/(0.91*0.5+0.97*0.5), 3)
round(0.91/0.97, 3)
round(0.95/0.98, 3)
round(0.91/0.97, 3)
#8
(alpha-1) / (alpha+beta-2)
#10
alpha10 = alpha + (54 -1)
beta10 = beta + (12 -1)
alpha10*beta10 / (alpha10+beta10)^2 /(alpha10+beta10+1)
#11
alpha11 = alpha + (54 -1)
beta11 = beta + (12 -1)
alpha11/ (alpha11+beta11)
round((alpha12 / (alpha12 + beta12))^2, 3)
#12 (might change for each test)
alpha12 = alpha + (54 -1)
beta12 = beta + (12 -1)
round((alpha12 / (alpha12 + beta12))^2, 3)
#12 (might change for each test)
alpha12 = alpha + (50 -1)
beta12 = beta + (12 -1)
round((alpha12 / (alpha12 + beta12))^2, 3)
#12 (might change for each test)
alpha12 = alpha + (50 -1)
beta12 = beta + (12 -1)
round((alpha12 / (alpha12 + beta12))^2, 3)
#11
alpha11 = alpha + (54 -1)
beta11 = beta + (12 -1)
alpha11/ (alpha11+beta11)
#12 (might change for each test)
alpha12 = alpha + (50 -1)
beta12 = beta + (12 -1)
round((alpha12 / (alpha12 + beta12))^2, 3)
#13
sqrt( 54*12 / (54+12)^2 /(54+12+1) )
#13
round(sqrt( 54*12 / (54+12)^2 /(54+12+1) ) ,3)
#11
alpha11 = alpha + (50 -1)
beta11 = beta + (12 -1)
alpha11/ (alpha11+beta11)
#7
n=200
tau.2.n = 1 / (1/tau.2.0 + n/sigma.2)
sqrt(tau.2.n)
#6
n=50
mu.0 = 1875; tau.2.0 = 160^2
sigma.2 = 200^2
ybar=2172
#7
n=200
tau.2.n = 1 / (1/tau.2.0 + n/sigma.2)
sqrt(tau.2.n)
#6
n=50
mu.0 = 1875; tau.2.0 = 160^2
sigma.2 = 200^2
ybar=2172
#7
n=200
#6
n=50
tau.2.n = 1 / (1/tau.2.0 + n/sigma.2)
sqrt(tau.2.n)
#8
n=100
tau.2.n = 1 / (1/tau.2.0 + n/sigma.2)
round(1/tau.2.n,3)
#9
n=200
mu.n = (mu.0/tau.2.0 + n*ybar/sigma.2) / (1/tau.2.0 + n/sigma.2)
tau.2.n = 1 / (1/tau.2.0 + n/sigma.2)
tau.2.n
mu.n + sqrt(tau.2.n) *1.96 * c(-1,1)
d = read.table("polls2016.txt", header = TRUE)
d$sigma = d$ME/2
setwd("~/Documents/UIUC/3_STAT578_Advanced_Bayesian_Modelling/week4")
d = read.table("polls2016.txt", header = TRUE)
d$sigma = d$ME/2
mean(d$y)
mean(d$sigma)
d
quantile(h.sim,2)
h.sim = c(1,2,3,4,56,7,8,9)
quantile(h.sim,2)
setwd("~/Documents/UIUC/3_STAT542_Practical_Statistical_Learning/Project1")
test <- read.csv("Ames_data.csv")
pred <- read.csv("mysubmission1.txt")
names(test.y)[2] <- "True_Sale_Price"
head(test)
test.y = test$Sale_Price
pred <- read.csv("mysubmission1.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
test.y <- read.csv("Ames_data.csv")
pred <- read.csv("mysubmission1.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
sqrt(mean((log(pred$Sale_Price) - log(pred$True_Sale_Price))^2))
head(test)
pred$Sale_Price
test.y <- read.csv("Ames_data.csv")
pred <- read.csv("mysubmission1.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
pred
pred <- read.csv("mysubmission1.txt")
pred
test.y <- read.csv("Ames_data.csv")
head(test.y
)
test.y = test[,c("PID","Sale_Price")]
pred <- read.csv("mysubmission1.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
sqrt(mean((log(pred$Sale_Price) - log(pred$True_Sale_Price))^2))
View(pred)
pred <- read.csv("mysubmission1.txt")
test <- read.csv("Ames_data.csv")
test.y = test[,c("PID","Sale_Price")]
pred <- read.csv("mysubmission1.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
sqrt(mean((log(pred$Sale_Price) - log(pred$True_Sale_Price))^2))
options(digits=7)
test <- read.csv("Ames_data.csv")
test.y = test[,c("PID","Sale_Price")]
pred <- read.csv("mysubmission1.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
sqrt(mean((log(pred$Sale_Price) - log(pred$True_Sale_Price))^2))
options(digits=5)
test <- read.csv("Ames_data.csv")
test.y = test[,c("PID","Sale_Price")]
pred <- read.csv("mysubmission1.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
sqrt(mean((log(pred$Sale_Price) - log(pred$True_Sale_Price))^2))
pred <- read.csv("mysubmission2.txt")
options(digits=5)
test <- read.csv("Ames_data.csv")
test.y = test[,c("PID","Sale_Price")]
pred <- read.csv("mysubmission1.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
sqrt(mean((log(pred$Sale_Price) - log(pred$True_Sale_Price))^2))
pred <- read.csv("mysubmission2.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
sqrt(mean((log(pred$Sale_Price) - log(pred$True_Sale_Price))^2))
options(digits=5)
test <- read.csv("Ames_data.csv")
test.y = test[,c("PID","Sale_Price")]
pred <- read.csv("mysubmission1.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
sqrt(mean((log(pred$Sale_Price) - log(pred$True_Sale_Price))^2))
pred <- read.csv("mysubmission2.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
sqrt(mean((log(pred$Sale_Price) - log(pred$True_Sale_Price))^2))
options(digits=5)
test <- read.csv("Ames_data.csv")
test.y = test[,c("PID","Sale_Price")]
pred <- read.csv("mysubmission1.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
sqrt(mean((log(pred$Sale_Price) - log(pred$True_Sale_Price))^2))
pred <- read.csv("mysubmission2.txt")
names(test.y)[2] <- "True_Sale_Price"
pred <- merge(pred, test.y, by="PID")
sqrt(mean((log(pred$Sale_Price) - log(pred$True_Sale_Price))^2))
seq(1, 2930, by=3)
#5
theta^43*(1-theta)^7
#8
(alpha-1) / (alpha+beta-2)
#7
alpha=44; beta=8
#8
(alpha-1) / (alpha+beta-2)
alpha + (54 -1)
beta + (12 -1)
#10
alpha10 = alpha + (54 -1)
beta10 = beta + (12 -1)
alpha10*beta10 / (alpha10+beta10)^2 /(alpha10+beta10+1)
#12 (might change for each test)
alpha12 = alpha + (50 -1)
beta12 = beta + (12 -1)
round((alpha12 / (alpha12 + beta12))^2, 3)
#13
round(sqrt( 54*12 / (54+12)^2 /(54+12+1) ) ,3)
#7
n=200
mu.0 = 1875; tau.2.0 = 160^2
sigma.2 = 200^2
#7
n=200
tau.2.n = 1 / (1/tau.2.0 + n/sigma.2)
sqrt(tau.2.n)
#9
n=200
mu.n = (mu.0/tau.2.0 + n*ybar/sigma.2) / (1/tau.2.0 + n/sigma.2)
tau.2.n = 1 / (1/tau.2.0 + n/sigma.2)
tau.2.n
ybar=2172
#9
n=200
mu.n = (mu.0/tau.2.0 + n*ybar/sigma.2) / (1/tau.2.0 + n/sigma.2)
tau.2.n = 1 / (1/tau.2.0 + n/sigma.2)
tau.2.n
mu.n + sqrt(tau.2.n) *1.96 * c(-1,1)
